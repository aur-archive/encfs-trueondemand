--- encfs-orig/encfs/main.cpp	2009-11-29 23:04:12.000000000 +0100
+++ src/encfs-1.7.4/encfs/main.cpp	2011-09-19 11:38:35.000000000 +0200
@@ -50,6 +50,7 @@
 #include "Context.h"
 
 #include "openssl.h"
+#include "signal.h"
 
 // Fuse version >= 26 requires another argument to fuse_unmount, which we
 // don't have.  So use the backward compatible call instead..
@@ -482,6 +483,14 @@
     }
 }
 
+EncFS_Context *ctx;
+
+void handle_sigusr1(int signo)
+{
+ ctx->setRoot( shared_ptr<DirNode>() );
+}
+
+
 int main(int argc, char *argv[])
 {
     // initialize the logging library
@@ -586,16 +595,24 @@
 
     // context is not a smart pointer because it will live for the life of
     // the filesystem.
-    EncFS_Context *ctx = new EncFS_Context;
+    ctx = new EncFS_Context;
+    signal(SIGUSR1,handle_sigusr1);
     ctx->publicFilesystem = encfsArgs->opts->ownerCreate;
-    RootPtr rootInfo = initFS( ctx, encfsArgs->opts );
+    RootPtr rootInfo;
     
     int returnCode = EXIT_FAILURE;
 
-    if( rootInfo )
+    if (!encfsArgs->opts->mountOnDemand)
+      rootInfo = initFS( ctx, encfsArgs->opts );
+    
+
+    if( rootInfo || encfsArgs->opts->mountOnDemand )
     {
 	// set the globally visible root directory node
-	ctx->setRoot( rootInfo->root );
+        if ( encfsArgs->opts->mountOnDemand )
+          ctx->setRoot( shared_ptr<DirNode>() );
+        else
+	  ctx->setRoot( rootInfo->root );
 	ctx->args = encfsArgs;
 	ctx->opts = encfsArgs->opts;
 	    
@@ -691,11 +708,14 @@
 static
 void * idleMonitor(void *_arg)
 {
-    EncFS_Context *ctx = (EncFS_Context*)_arg;
+    ctx = (EncFS_Context*)_arg;
     shared_ptr<EncFS_Args> arg = ctx->args;
 
     const int timeoutCycles = 60 * arg->idleTimeout / ActivityCheckInterval;
     int idleCycles = 0;
+     
+    if (arg->opts->mountOnDemand)
+	idleCycles = timeoutCycles +1;
 
     pthread_mutex_lock( &ctx->wakeupMutex );
     
